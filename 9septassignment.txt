1)import java.util.Scanner;
public interface Calculate
{
    double calSI(double P,double R,double T);
    double calCI(double P,double R,double T);
	 
}


public class Test implements Calculate
{
	
	 double SI=0;
	 double CI=0;
	
	//override
	public double calSI(double P,double R,double Time) 
	  {
		SI= (P*R*T)/100;
		return SI;
	  }

       //Override
	public double calCI(double P,double R,double T) 
	  {
		CI = P* Math.pow(1.0+R/100.0,T);
		return CI;
	  }
	
	public static void main(String[] args) 
	{
		
		Test Obj = new Test();
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter Principle");
		double  P = sc.nextDouble();
		System.out.println("Enter Rate");
		double  R= sc.nextDouble();
		System.out.println("Enter Time ");
		double  T = sc.nextDouble();
		
                System.out.println("SI :"+Obj.calSI(P,R,T));
		System.out.println("CI :"+Obj.calCI(P,R,T));
		}
          }
2)--------ORDER MANAGEMENT SYSTEM------------

ENUMS
>> UserState
    - NEW
    - ACTIVE
    - BLOCKED
    - INACTIVE

>> OrderStatus
    - CREATE
    - SHIPPED
    - DELIVERED
    - PAID

>> PaymentType
    - COD
    - UPI
    - NETBANKING
    - CHEQUE

>> DeliveryMode
    -STANDARD
    -EXPRESS

INTERFACES
>> UserDataDAO
    +getUserData()
    +updateUserData()
    +addUserData()
    +deleteUserData()
    +modifyUserState(UserState state)

>> InventoryDataDAO()
    +getItems()
    +updateItems()
    +addItems()
    +deleteItems()

ABSTRACT CLASSES
>> UserServices 
    +abstract updateProfile()
    +abstract updateAccessRights()
    +abstract updateShippingDetails()
    +abstract updatePaymentMode()
    +abstract login()
    +abstract signUp()

CLASSES
>> User extends UserServices implements UserDataDAO
    -userId : String
    -userName : String
    -password: String
    -contactNo : long
    -userState : UserState

    +updateProfile()
    +updateAccessRights()
    +updateShippingDetails()
    +updatePaymentMode() 
    +login()
    +signUp()
    +getUserData()
    +updateUserData()
    +addUserData()
    +deleteUserData()
    +modifyUserState(UserState state)

>> Customer extends User
    -deliveryAddress : String
    -paymentMode : PaymentType
    
    +updateProfile()
    +updateShippingDetails(String deliveryAddress)
    +updatePaymentMode(PaymentType paymentMode)
    +login()
    +signUp()

>> Admin extends User
    +updateAccessRights()
    +updateProfile()
    +updateUserData()
    +modifyUserState(UserState state)
    +deleteUserData()
    +addUserData(Customer customer)
    +getUserData()

>> Payment
    -id : String
    -paid : Date
    -paymentMode : PaymentType

    +getId()
    +getDate()
    +getPaymentMode()

>> Order
    -orderNumber : long
    -orderDate : Date
    -shippedDate : Date
    -status : OrderStatus
    -quantity : int
    -price : double

    +getOrderNumber()
    +getOrderDate()
    +getShippedDate()
    +setShippedDate(Date shippedDate)
    +getOrderStatus()
    +setOrderStatus(OrderStatus status);
    +getQuantity()
    +getPrice()

>> Delivery extends Order 
    -deliveryType : DeliveryMode
    
    +getDeliverytype()
    +setDeliverytype(DeliveryMode deliveryType)
    +cancelDelivery()
    +setOrderStatus(OrderStatus status)

>> Product implements InventoryDataDAO
    -productId : String
    -productName : String
    -supplier : String
    -availableQty : int
    -costPrice : double
    -sellingPrice : double

    +getProductId()
    +getProductName()
    +getSupplier()
    +getAvailableQty()
    +getCostPrice()
    +getSellingPrice()
    +setSellingPrice(double price)
    +getItems()
    +updateItems()
    +addItems()
    +deleteItems()
